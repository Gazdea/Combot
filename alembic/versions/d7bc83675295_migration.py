"""migration

Revision ID: d7bc83675295
Revises: 6222c12f4815
Create Date: 2024-11-12 09:54:09.384372

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'd7bc83675295'
down_revision: Union[str, None] = '6222c12f4815'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_check_spam_violation = PGFunction(
        schema="public",
        signature="check_spam_violation()",
        definition="RETURNS TRIGGER AS $$\nDECLARE\n    mute_duration FLOAT;\n    max_messages INT;\n    time_window INT;\n    last_message_time TIMESTAMP;\nBEGIN\n    SELECT spam_mute_time, spam_message, spam_time\n    INTO mute_duration, max_messages, time_window\n    FROM chats\n    WHERE id = NEW.chat_id;\n\n    SELECT MAX(date) INTO last_message_time\n    FROM messages\n    WHERE user_id = NEW.user_id\n    AND chat_id = NEW.chat_id;\n\n    IF (SELECT COUNT(*) FROM messages\n        WHERE user_id = NEW.user_id\n        AND chat_id = NEW.chat_id\n        AND date > (last_message_time - INTERVAL '1 second' * time_window)\n       ) >= max_messages THEN\n        \n        INSERT INTO muted_users (user_id, chat_id, time_end, reason)\n        VALUES (NEW.user_id, NEW.chat_id, last_message_time + INTERVAL '1 second' * mute_duration, 'Spamming')\n        ON CONFLICT (user_id, chat_id) DO UPDATE\n        SET time_end = last_message_time + INTERVAL '1 second' * mute_duration;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql"
    )
    op.replace_entity(public_check_spam_violation)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_check_spam_violation = PGFunction(
        schema="public",
        signature="check_spam_violation()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    mute_duration FLOAT;\n    max_messages INT;\n    time_window INT;\n    last_message_time TIMESTAMP;\nBEGIN\n    SELECT spam_mute_time, spam_message, spam_time\n    INTO mute_duration, max_messages, time_window\n    FROM chats\n    WHERE id = NEW.chat_id;\n\n    SELECT MAX(date) INTO last_message_time\n    FROM messages\n    WHERE user_id = NEW.user_id\n    AND chat_id = NEW.chat_id;\n\n    IF (SELECT COUNT(*) FROM messages\n        WHERE user_id = NEW.user_id\n        AND chat_id = NEW.chat_id\n        AND date > (last_message_time - INTERVAL '1 second' * time_window)\n       ) >= max_messages THEN\n        \n        INSERT INTO muted_users (user_id, chat_id, time_end)\n        VALUES (NEW.user_id, NEW.chat_id, last_message_time + INTERVAL '1 second' * mute_duration)\n        ON CONFLICT (user_id, chat_id) DO UPDATE\n        SET time_end = last_message_time + INTERVAL '1 second' * mute_duration;\n    END IF;\n    RETURN NEW;\nEND;\n$function$"
    )
    op.replace_entity(public_check_spam_violation)
    # ### end Alembic commands ###
