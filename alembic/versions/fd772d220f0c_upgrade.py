"""Upgrade

Revision ID: fd772d220f0c
Revises: 635342cc45ad
Create Date: 2024-10-31 15:06:59.182522

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'fd772d220f0c'
down_revision: Union[str, None] = '635342cc45ad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_insert_standard_roles_and_commands = PGFunction(
        schema="public",
        signature="insert_standard_roles_and_commands()",
        definition="RETURNS TRIGGER AS $$\nBEGIN\n    -- Вставляем стандартные роли\n    INSERT INTO roles (role_name, chat_id) VALUES \n        ('admin', NEW.id), \n        ('moderator', NEW.id), \n        ('user', NEW.id);\n    -- Вставляем стандартные команды\n    INSERT INTO commands (command, command_name, description, chat_id) VALUES \n                ('/start', 'start', 'Запустить бота', NEW.id),\n                ('/help', 'help', 'Получить помощь', NEW.id),\n                ('/mute', 'mute', 'Заглушить пользователя', NEW.id),\n                ('/kick', 'kick', 'Выгнать пользователя', NEW.id),\n                ('/unban', 'unban', 'Разбанить пользователя', NEW.id),\n                ('/delete', 'delete_message', 'Удалить сообщение пользователя', NEW.id),\n                ('/info', 'info', 'Информация о создателе', NEW.id),\n                ('/ban', 'ban', 'Забанить пользователя', NEW.id),\n                ('/unmute', 'unmute', 'Снять заглушение пользователя', NEW.id),\n                ('/chatSpamMuteTimeSet', 'chat_spam_mute_time_set', 'Установить время мута в чате', NEW.id),\n                ('/chatSpamNumMessageSet', 'chat_spam_mum_message_set', 'Установить колличество сообщения для мута', NEW.id),\n                ('/chatSpamTimeSet', 'chat_spam_time_set', 'Установить время подсчитывания сообщений', NEW.id),\n                ('/chatdeletePatternSet', 'chat_delete_pattern_set', 'Установить паттерн удаляемых сообщений', NEW.id),\n                ('/roleAdd', 'role_add', 'Добавить роль', NEW.id),\n                ('/roleDelete', 'role_delete', 'Удалить роль', NEW.id),\n                ('/roleCommandAdd', 'role_command_add', 'Добавить команду для роли', NEW.id),\n                ('/roleCommandDelete', 'role_command_delete', 'Удалить команду для роли', NEW.id),\n                ('/userRoleSet', 'role_user_set', 'Устаноить пользователю роль', NEW.id),\n                ('/commandRename', 'command_rename', 'Изменить название команды', NEW.id),\n                ('/chatUser', 'chat_user', 'Получить информацию о юзере', NEW.id),\n                ('/chatStatsUserJoin', 'chat_stats_user_join', 'Получить статистику о подключившихся пользователях', NEW.id),\n                ('/chatStatsUserActive', 'chat_stats_user_active', 'Получить статистику активных пользователей', NEW.id);\n\n    -- Разрешения для ролей (admin, moderator, user)\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'admin';\n\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'moderator'\n    AND c.command IN ('/mute', '/kick', '/unmute', '/delete', '/start', '/info', '/help');\n\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'user'\n    AND c.command IN ('/start', '/help', '/info');\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql"
    )
    op.create_entity(public_insert_standard_roles_and_commands)

    public_check_spam_violation = PGFunction(
        schema="public",
        signature="check_spam_violation()",
        definition="RETURNS TRIGGER AS $$\nDECLARE\n    mute_duration FLOAT;\n    max_messages INT;\n    time_window INT;\n    last_message_time TIMESTAMP;\nBEGIN\n    SELECT spam_mute_time, spam_message, spam_time\n    INTO mute_duration, max_messages, time_window\n    FROM chats\n    WHERE id = NEW.chat_id;\n\n    SELECT MAX(date) INTO last_message_time\n    FROM messages\n    WHERE user_id = NEW.user_id\n    AND chat_id = NEW.chat_id;\n\n    IF (SELECT COUNT(*) FROM messages\n        WHERE user_id = NEW.user_id\n        AND chat_id = NEW.chat_id\n        AND date > (last_message_time - INTERVAL '1 second' * time_window)\n       ) >= max_messages THEN\n        \n        INSERT INTO muted_users (user_id, chat_id, time_end)\n        VALUES (NEW.user_id, NEW.chat_id, last_message_time + INTERVAL '1 second' * mute_duration)\n        ON CONFLICT (user_id, chat_id) DO UPDATE\n        SET time_end = last_message_time + INTERVAL '1 second' * mute_duration;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql"
    )
    op.create_entity(public_check_spam_violation)

    public_messages_trigger_spam_violation_check = PGTrigger(
        schema="public",
        signature="trigger_spam_violation_check",
        on_entity="public.messages",
        is_constraint=False,
        definition='AFTER INSERT ON messages\nFOR EACH ROW\nEXECUTE FUNCTION check_spam_violation()'
    )
    op.create_entity(public_messages_trigger_spam_violation_check)

    public_chats_trigger_insert_roles_and_commands = PGTrigger(
        schema="public",
        signature="trigger_insert_roles_and_commands",
        on_entity="public.chats",
        is_constraint=False,
        definition='AFTER INSERT ON chats\nFOR EACH ROW\nEXECUTE FUNCTION insert_standard_roles_and_commands()'
    )
    op.create_entity(public_chats_trigger_insert_roles_and_commands)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_chats_trigger_insert_roles_and_commands = PGTrigger(
        schema="public",
        signature="trigger_insert_roles_and_commands",
        on_entity="public.chats",
        is_constraint=False,
        definition='AFTER INSERT ON chats\nFOR EACH ROW\nEXECUTE FUNCTION insert_standard_roles_and_commands()'
    )
    op.drop_entity(public_chats_trigger_insert_roles_and_commands)

    public_messages_trigger_spam_violation_check = PGTrigger(
        schema="public",
        signature="trigger_spam_violation_check",
        on_entity="public.messages",
        is_constraint=False,
        definition='AFTER INSERT ON messages\nFOR EACH ROW\nEXECUTE FUNCTION check_spam_violation()'
    )
    op.drop_entity(public_messages_trigger_spam_violation_check)

    public_check_spam_violation = PGFunction(
        schema="public",
        signature="check_spam_violation()",
        definition="RETURNS TRIGGER AS $$\nDECLARE\n    mute_duration FLOAT;\n    max_messages INT;\n    time_window INT;\n    last_message_time TIMESTAMP;\nBEGIN\n    SELECT spam_mute_time, spam_message, spam_time\n    INTO mute_duration, max_messages, time_window\n    FROM chats\n    WHERE id = NEW.chat_id;\n\n    SELECT MAX(date) INTO last_message_time\n    FROM messages\n    WHERE user_id = NEW.user_id\n    AND chat_id = NEW.chat_id;\n\n    IF (SELECT COUNT(*) FROM messages\n        WHERE user_id = NEW.user_id\n        AND chat_id = NEW.chat_id\n        AND date > (last_message_time - INTERVAL '1 second' * time_window)\n       ) >= max_messages THEN\n        \n        INSERT INTO muted_users (user_id, chat_id, time_end)\n        VALUES (NEW.user_id, NEW.chat_id, last_message_time + INTERVAL '1 second' * mute_duration)\n        ON CONFLICT (user_id, chat_id) DO UPDATE\n        SET time_end = last_message_time + INTERVAL '1 second' * mute_duration;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql"
    )
    op.drop_entity(public_check_spam_violation)

    public_insert_standard_roles_and_commands = PGFunction(
        schema="public",
        signature="insert_standard_roles_and_commands()",
        definition="RETURNS TRIGGER AS $$\nBEGIN\n    -- Вставляем стандартные роли\n    INSERT INTO roles (role_name, chat_id) VALUES \n        ('admin', NEW.id), \n        ('moderator', NEW.id), \n        ('user', NEW.id);\n    -- Вставляем стандартные команды\n    INSERT INTO commands (command, command_name, description, chat_id) VALUES \n                ('/start', 'start', 'Запустить бота', NEW.id),\n                ('/help', 'help', 'Получить помощь', NEW.id),\n                ('/mute', 'mute', 'Заглушить пользователя', NEW.id),\n                ('/kick', 'kick', 'Выгнать пользователя', NEW.id),\n                ('/unban', 'unban', 'Разбанить пользователя', NEW.id),\n                ('/delete', 'delete_message', 'Удалить сообщение пользователя', NEW.id),\n                ('/info', 'info', 'Информация о создателе', NEW.id),\n                ('/ban', 'ban', 'Забанить пользователя', NEW.id),\n                ('/unmute', 'unmute', 'Снять заглушение пользователя', NEW.id),\n                ('/chatSpamMuteTimeSet', 'chat_spam_mute_time_set', 'Установить время мута в чате', NEW.id),\n                ('/chatSpamNumMessageSet', 'chat_spam_mum_message_set', 'Установить колличество сообщения для мута', NEW.id),\n                ('/chatSpamTimeSet', 'chat_spam_time_set', 'Установить время подсчитывания сообщений', NEW.id),\n                ('/chatdeletePatternSet', 'chat_delete_pattern_set', 'Установить паттерн удаляемых сообщений', NEW.id),\n                ('/roleAdd', 'role_add', 'Добавить роль', NEW.id),\n                ('/roleDelete', 'role_delete', 'Удалить роль', NEW.id),\n                ('/roleCommandAdd', 'role_command_add', 'Добавить команду для роли', NEW.id),\n                ('/roleCommandDelete', 'role_command_delete', 'Удалить команду для роли', NEW.id),\n                ('/userRoleSet', 'role_user_set', 'Устаноить пользователю роль', NEW.id),\n                ('/commandRename', 'command_rename', 'Изменить название команды', NEW.id),\n                ('/chatUser', 'chat_user', 'Получить информацию о юзере', NEW.id),\n                ('/chatStatsUserJoin', 'chat_stats_user_join', 'Получить статистику о подключившихся пользователях', NEW.id),\n                ('/chatStatsUserActive', 'chat_stats_user_active', 'Получить статистику активных пользователей', NEW.id);\n\n    -- Разрешения для ролей (admin, moderator, user)\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'admin';\n\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'moderator'\n    AND c.command IN ('/mute', '/kick', '/unmute', '/delete', '/start', '/info', '/help');\n\n    INSERT INTO role_permissions (role_id, command_id)\n    SELECT r.id, c.id \n    FROM roles r, commands c \n    WHERE r.chat_id = NEW.id AND r.role_name = 'user'\n    AND c.command IN ('/start', '/help', '/info');\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql"
    )
    op.drop_entity(public_insert_standard_roles_and_commands)

    # ### end Alembic commands ###
